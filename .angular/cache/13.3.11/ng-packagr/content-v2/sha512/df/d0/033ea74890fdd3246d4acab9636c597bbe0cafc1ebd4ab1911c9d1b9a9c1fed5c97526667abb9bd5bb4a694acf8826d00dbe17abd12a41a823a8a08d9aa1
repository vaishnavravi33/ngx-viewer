{"hash":"6bc41aabbb761c39c1b89a283713b56dad113f8a","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport Viewer from 'viewerjs';\n\nclass NgxViewerDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.viewerOptions = {};\r\n        this.viewerReady = new EventEmitter();\r\n        this.viewerShow = new EventEmitter();\r\n        this.viewerShown = new EventEmitter();\r\n        this.viewerHide = new EventEmitter();\r\n        this.viewerHidden = new EventEmitter();\r\n        this.viewerView = new EventEmitter();\r\n        this.viewerViewed = new EventEmitter();\r\n        this.viewerZoom = new EventEmitter();\r\n        this.viewerZoomed = new EventEmitter();\r\n        this.nativeElement = this.elementRef.nativeElement;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.initViewer();\r\n    }\r\n    initViewer() {\r\n        if (this.instance) {\r\n            this.instance.destroy();\r\n        }\r\n        this.instance = new Viewer(this.nativeElement, {\r\n            // Transitions currently break the Viewer when running optimizations during ng build (i.e in prod mode)\r\n            // TODO: Find a fix for this so we don't have to force disable transitions\r\n            transition: false,\r\n            ...this.viewerOptions\r\n        });\r\n        this.nativeElement.addEventListener('ready', event => this.viewerReady.emit(event), false);\r\n        this.nativeElement.addEventListener('show', event => this.viewerShow.emit(event), false);\r\n        this.nativeElement.addEventListener('shown', event => this.viewerShown.emit(event), false);\r\n        this.nativeElement.addEventListener('hide', event => this.viewerHide.emit(event), false);\r\n        this.nativeElement.addEventListener('hidden', event => this.viewerHidden.emit(event), false);\r\n        this.nativeElement.addEventListener('view', event => this.viewerView.emit(event), false);\r\n        this.nativeElement.addEventListener('viewed', event => this.viewerViewed.emit(event), false);\r\n        this.nativeElement.addEventListener('zoom', event => this.viewerZoom.emit(event), false);\r\n        this.nativeElement.addEventListener('zoomed', event => this.viewerZoomed.emit(event), false);\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.instance) {\r\n            this.instance.destroy();\r\n        }\r\n    }\r\n}\r\nNgxViewerDirective.ɵfac = function NgxViewerDirective_Factory(t) { return new (t || NgxViewerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };\r\nNgxViewerDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: NgxViewerDirective, selectors: [[\"\", \"ngxViewer\", \"\"]], inputs: { viewerOptions: \"viewerOptions\" }, outputs: { viewerReady: \"viewerReady\", viewerShow: \"viewerShow\", viewerShown: \"viewerShown\", viewerHide: \"viewerHide\", viewerHidden: \"viewerHidden\", viewerView: \"viewerView\", viewerViewed: \"viewerViewed\", viewerZoom: \"viewerZoom\", viewerZoomed: \"viewerZoomed\" } });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxViewerDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[ngxViewer]'\r\n            }]\r\n    }], function () { return [{ type: i0.ElementRef }]; }, { viewerOptions: [{\r\n            type: Input\r\n        }], viewerReady: [{\r\n            type: Output\r\n        }], viewerShow: [{\r\n            type: Output\r\n        }], viewerShown: [{\r\n            type: Output\r\n        }], viewerHide: [{\r\n            type: Output\r\n        }], viewerHidden: [{\r\n            type: Output\r\n        }], viewerView: [{\r\n            type: Output\r\n        }], viewerViewed: [{\r\n            type: Output\r\n        }], viewerZoom: [{\r\n            type: Output\r\n        }], viewerZoomed: [{\r\n            type: Output\r\n        }] }); })();\n\nclass NgxViewerModule {\r\n}\r\nNgxViewerModule.ɵfac = function NgxViewerModule_Factory(t) { return new (t || NgxViewerModule)(); };\r\nNgxViewerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxViewerModule });\r\nNgxViewerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[]] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxViewerModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                imports: [],\r\n                declarations: [NgxViewerDirective],\r\n                exports: [NgxViewerDirective]\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxViewerModule, { declarations: [NgxViewerDirective], exports: [NgxViewerDirective] }); })();\n\n/*\r\n * Public API Surface of ngx-viewer\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxViewerDirective, NgxViewerModule };\n//# sourceMappingURL=ngx-viewer.mjs.map\n","map":{"version":3,"file":"ngx-viewer.mjs","sources":["../../../projects/ngx-viewer/src/lib/ngx-viewer.directive.ts","../../../projects/ngx-viewer/src/lib/ngx-viewer.module.ts","../../../projects/ngx-viewer/src/public_api.ts","../../../projects/ngx-viewer/src/ngx-viewer.ts"],"sourcesContent":["import { Directive, ElementRef, NgModule, OnDestroy, AfterViewInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport Viewer from 'viewerjs';\r\n\r\n@Directive({\r\n  selector: '[ngxViewer]'\r\n})\r\nexport class NgxViewerDirective implements AfterViewInit, OnDestroy {\r\n  @Input() viewerOptions: Viewer.Options = {};\r\n\r\n  @Output() viewerReady: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerShow: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerShown: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerHide: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerHidden: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerView: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerViewed: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerZoom: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerZoomed: EventEmitter<Event> = new EventEmitter<Event>();\r\n\r\n  instance: Viewer;\r\n\r\n  private nativeElement: HTMLElement;\r\n\r\n  constructor(private elementRef: ElementRef) {\r\n    this.nativeElement = this.elementRef.nativeElement;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.initViewer();\r\n  }\r\n\r\n  private initViewer(): void {\r\n    if (this.instance) {\r\n      this.instance.destroy();\r\n    }\r\n\r\n    this.instance = new Viewer(this.nativeElement, {\r\n      // Transitions currently break the Viewer when running optimizations during ng build (i.e in prod mode)\r\n      // TODO: Find a fix for this so we don't have to force disable transitions\r\n      transition: false,\r\n      ...this.viewerOptions\r\n    });\r\n\r\n    this.nativeElement.addEventListener('ready', event => this.viewerReady.emit(event), false);\r\n    this.nativeElement.addEventListener('show', event => this.viewerShow.emit(event), false);\r\n    this.nativeElement.addEventListener('shown', event => this.viewerShown.emit(event), false);\r\n    this.nativeElement.addEventListener('hide', event => this.viewerHide.emit(event), false);\r\n    this.nativeElement.addEventListener('hidden', event => this.viewerHidden.emit(event), false);\r\n    this.nativeElement.addEventListener('view', event => this.viewerView.emit(event), false);\r\n    this.nativeElement.addEventListener('viewed', event => this.viewerViewed.emit(event), false);\r\n    this.nativeElement.addEventListener('zoom', event => this.viewerZoom.emit(event), false);\r\n    this.nativeElement.addEventListener('zoomed', event => this.viewerZoomed.emit(event), false);\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.instance) {\r\n      this.instance.destroy();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxViewerDirective } from './ngx-viewer.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [NgxViewerDirective],\r\n  exports: [NgxViewerDirective]\r\n})\r\nexport class NgxViewerModule { }\r\n","/*\r\n * Public API Surface of ngx-viewer\r\n */\r\n\r\nexport * from './lib/ngx-viewer.directive';\r\nexport * from './lib/ngx-viewer.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport Viewer from 'viewerjs';\n\nclass NgxViewerDirective {\r\n    constructor(elementRef) {\r\n        this.elementRef = elementRef;\r\n        this.viewerOptions = {};\r\n        this.viewerReady = new EventEmitter();\r\n        this.viewerShow = new EventEmitter();\r\n        this.viewerShown = new EventEmitter();\r\n        this.viewerHide = new EventEmitter();\r\n        this.viewerHidden = new EventEmitter();\r\n        this.viewerView = new EventEmitter();\r\n        this.viewerViewed = new EventEmitter();\r\n        this.viewerZoom = new EventEmitter();\r\n        this.viewerZoomed = new EventEmitter();\r\n        this.nativeElement = this.elementRef.nativeElement;\r\n    }\r\n    ngAfterViewInit() {\r\n        this.initViewer();\r\n    }\r\n    initViewer() {\r\n        if (this.instance) {\r\n            this.instance.destroy();\r\n        }\r\n        this.instance = new Viewer(this.nativeElement, Object.assign({ \r\n            // Transitions currently break the Viewer when running optimizations during ng build (i.e in prod mode)\r\n            // TODO: Find a fix for this so we don't have to force disable transitions\r\n            transition: false }, this.viewerOptions));\r\n        this.nativeElement.addEventListener('ready', event => this.viewerReady.emit(event), false);\r\n        this.nativeElement.addEventListener('show', event => this.viewerShow.emit(event), false);\r\n        this.nativeElement.addEventListener('shown', event => this.viewerShown.emit(event), false);\r\n        this.nativeElement.addEventListener('hide', event => this.viewerHide.emit(event), false);\r\n        this.nativeElement.addEventListener('hidden', event => this.viewerHidden.emit(event), false);\r\n        this.nativeElement.addEventListener('view', event => this.viewerView.emit(event), false);\r\n        this.nativeElement.addEventListener('viewed', event => this.viewerViewed.emit(event), false);\r\n        this.nativeElement.addEventListener('zoom', event => this.viewerZoom.emit(event), false);\r\n        this.nativeElement.addEventListener('zoomed', event => this.viewerZoomed.emit(event), false);\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.instance) {\r\n            this.instance.destroy();\r\n        }\r\n    }\r\n}\r\nNgxViewerDirective.ɵfac = function NgxViewerDirective_Factory(t) { return new (t || NgxViewerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };\r\nNgxViewerDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: NgxViewerDirective, selectors: [[\"\", \"ngxViewer\", \"\"]], inputs: { viewerOptions: \"viewerOptions\" }, outputs: { viewerReady: \"viewerReady\", viewerShow: \"viewerShow\", viewerShown: \"viewerShown\", viewerHide: \"viewerHide\", viewerHidden: \"viewerHidden\", viewerView: \"viewerView\", viewerViewed: \"viewerViewed\", viewerZoom: \"viewerZoom\", viewerZoomed: \"viewerZoomed\" } });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxViewerDirective, [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxViewer]'\r\n                }]\r\n        }], function () { return [{ type: i0.ElementRef }]; }, { viewerOptions: [{\r\n                type: Input\r\n            }], viewerReady: [{\r\n                type: Output\r\n            }], viewerShow: [{\r\n                type: Output\r\n            }], viewerShown: [{\r\n                type: Output\r\n            }], viewerHide: [{\r\n                type: Output\r\n            }], viewerHidden: [{\r\n                type: Output\r\n            }], viewerView: [{\r\n                type: Output\r\n            }], viewerViewed: [{\r\n                type: Output\r\n            }], viewerZoom: [{\r\n                type: Output\r\n            }], viewerZoomed: [{\r\n                type: Output\r\n            }] });\r\n})();\n\nclass NgxViewerModule {\r\n}\r\nNgxViewerModule.ɵfac = function NgxViewerModule_Factory(t) { return new (t || NgxViewerModule)(); };\r\nNgxViewerModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgxViewerModule });\r\nNgxViewerModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[]] });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxViewerModule, [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [NgxViewerDirective],\r\n                    exports: [NgxViewerDirective]\r\n                }]\r\n        }], null, null);\r\n})();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxViewerModule, { declarations: [NgxViewerDirective], exports: [NgxViewerDirective] }); })();\n\n/*\r\n * Public API Surface of ngx-viewer\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxViewerDirective, NgxViewerModule };\n//# sourceMappingURL=ngx-viewer.mjs.map\n","map":{"version":3,"file":"ngx-viewer.mjs","sources":["../../../projects/ngx-viewer/src/lib/ngx-viewer.directive.ts","../../../projects/ngx-viewer/src/lib/ngx-viewer.module.ts","../../../projects/ngx-viewer/src/public_api.ts","../../../projects/ngx-viewer/src/ngx-viewer.ts"],"sourcesContent":["import { Directive, ElementRef, NgModule, OnDestroy, AfterViewInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport Viewer from 'viewerjs';\r\n\r\n@Directive({\r\n  selector: '[ngxViewer]'\r\n})\r\nexport class NgxViewerDirective implements AfterViewInit, OnDestroy {\r\n  @Input() viewerOptions: Viewer.Options = {};\r\n\r\n  @Output() viewerReady: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerShow: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerShown: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerHide: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerHidden: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerView: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerViewed: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerZoom: EventEmitter<Event> = new EventEmitter<Event>();\r\n  @Output() viewerZoomed: EventEmitter<Event> = new EventEmitter<Event>();\r\n\r\n  instance: Viewer;\r\n\r\n  private nativeElement: HTMLElement;\r\n\r\n  constructor(private elementRef: ElementRef) {\r\n    this.nativeElement = this.elementRef.nativeElement;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.initViewer();\r\n  }\r\n\r\n  private initViewer(): void {\r\n    if (this.instance) {\r\n      this.instance.destroy();\r\n    }\r\n\r\n    this.instance = new Viewer(this.nativeElement, {\r\n      // Transitions currently break the Viewer when running optimizations during ng build (i.e in prod mode)\r\n      // TODO: Find a fix for this so we don't have to force disable transitions\r\n      transition: false,\r\n      ...this.viewerOptions\r\n    });\r\n\r\n    this.nativeElement.addEventListener('ready', event => this.viewerReady.emit(event), false);\r\n    this.nativeElement.addEventListener('show', event => this.viewerShow.emit(event), false);\r\n    this.nativeElement.addEventListener('shown', event => this.viewerShown.emit(event), false);\r\n    this.nativeElement.addEventListener('hide', event => this.viewerHide.emit(event), false);\r\n    this.nativeElement.addEventListener('hidden', event => this.viewerHidden.emit(event), false);\r\n    this.nativeElement.addEventListener('view', event => this.viewerView.emit(event), false);\r\n    this.nativeElement.addEventListener('viewed', event => this.viewerViewed.emit(event), false);\r\n    this.nativeElement.addEventListener('zoom', event => this.viewerZoom.emit(event), false);\r\n    this.nativeElement.addEventListener('zoomed', event => this.viewerZoomed.emit(event), false);\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.instance) {\r\n      this.instance.destroy();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxViewerDirective } from './ngx-viewer.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [NgxViewerDirective],\r\n  exports: [NgxViewerDirective]\r\n})\r\nexport class NgxViewerModule { }\r\n","/*\r\n * Public API Surface of ngx-viewer\r\n */\r\n\r\nexport * from './lib/ngx-viewer.directive';\r\nexport * from './lib/ngx-viewer.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;MAMa,kBAAkB,CAAA;AAiB7B,IAAA,WAAA,CAAoB,UAAsB,EAAA;AAAtB,QAAA,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;AAhBjC,QAAA,IAAa,CAAA,aAAA,GAAmB,EAAE,CAAC;AAElC,QAAA,IAAA,CAAA,WAAW,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC7D,QAAA,IAAA,CAAA,UAAU,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC5D,QAAA,IAAA,CAAA,WAAW,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC7D,QAAA,IAAA,CAAA,UAAU,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC5D,QAAA,IAAA,CAAA,YAAY,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC9D,QAAA,IAAA,CAAA,UAAU,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC5D,QAAA,IAAA,CAAA,YAAY,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC9D,QAAA,IAAA,CAAA,UAAU,GAAwB,IAAI,YAAY,EAAS,CAAC;AAC5D,QAAA,IAAA,CAAA,YAAY,GAAwB,IAAI,YAAY,EAAS,CAAC;QAOtE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;KACpD;IAEM,eAAe,GAAA;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;IAEO,UAAU,GAAA;QAChB,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AACzB,SAAA;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAA,MAAA,CAAA,MAAA,CAAA;;;AAG3C,YAAA,UAAU,EAAE,KAAK,EAAA,EACd,IAAI,CAAC,aAAa,EACrB,CAAC;QAEH,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAC7F,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAC7F,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QACzF,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;KAC9F;IAEM,WAAW,GAAA;QAChB,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,YAAA,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AACzB,SAAA;KACF;;oFApDU,kBAAkB,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,EAAA,CAAA;qEAAlB,kBAAkB,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,WAAA,EAAA,EAAA,CAAA,CAAA,EAAA,MAAA,EAAA,EAAA,aAAA,EAAA,eAAA,EAAA,EAAA,OAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAA,UAAA,EAAA,YAAA,EAAA,WAAA,EAAA,aAAA,EAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,EAAA,CAAA,CAAA;;4EAAlB,kBAAkB,EAAA,CAAA;kBAH9B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,QAAQ,EAAE,aAAa;iBACxB,CAAA;iEAEU,aAAa,EAAA,CAAA;sBAArB,KAAK;gBAEI,WAAW,EAAA,CAAA;sBAApB,MAAM;gBACG,UAAU,EAAA,CAAA;sBAAnB,MAAM;gBACG,WAAW,EAAA,CAAA;sBAApB,MAAM;gBACG,UAAU,EAAA,CAAA;sBAAnB,MAAM;gBACG,YAAY,EAAA,CAAA;sBAArB,MAAM;gBACG,UAAU,EAAA,CAAA;sBAAnB,MAAM;gBACG,YAAY,EAAA,CAAA;sBAArB,MAAM;gBACG,UAAU,EAAA,CAAA;sBAAnB,MAAM;gBACG,YAAY,EAAA,CAAA;sBAArB,MAAM;;;;MCRI,eAAe,CAAA;;8EAAf,eAAe,GAAA,CAAA,EAAA,CAAA;iEAAf,eAAe,EAAA,CAAA,CAAA;qEALjB,EACR,CAAA,EAAA,CAAA,CAAA;;4EAIU,eAAe,EAAA,CAAA;kBAN3B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,OAAO,EAAE,EACR;oBACD,YAAY,EAAE,CAAC,kBAAkB,CAAC;oBAClC,OAAO,EAAE,CAAC,kBAAkB,CAAC;iBAC9B,CAAA;;;wFACY,eAAe,EAAA,EAAA,YAAA,EAAA,CAHX,kBAAkB,CAAA,EAAA,OAAA,EAAA,CACvB,kBAAkB,CAAA,EAAA,CAAA,CAAA,EAAA,GAAA;;ACP9B;;AAEG;;ACFH;;AAEG;;;;"}}}