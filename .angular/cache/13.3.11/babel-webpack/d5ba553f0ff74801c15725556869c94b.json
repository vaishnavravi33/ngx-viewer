{"ast":null,"code":"import _possibleConstructorReturn from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _get from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _inherits from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _classCallCheck from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\n\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nvar BufferWhenOperator = /*#__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    _classCallCheck(this, BufferWhenOperator);\n\n    this.closingSelector = closingSelector;\n  }\n\n  return _createClass(BufferWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n  }]);\n}();\n\nvar BufferWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, BufferWhenSubscriber);\n\n    _this = _callSuper(this, BufferWhenSubscriber, [destination]);\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n\n    _this.openBuffer();\n\n    return _this;\n  }\n\n  _inherits(BufferWhenSubscriber, _SimpleOuterSubscribe);\n\n  return _createClass(BufferWhenSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.buffer.push(value);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var buffer = this.buffer;\n\n      if (buffer) {\n        this.destination.next(buffer);\n      }\n\n      _superPropGet(BufferWhenSubscriber, \"_complete\", this, 3)([]);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.buffer = undefined;\n      this.subscribing = false;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.openBuffer();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.subscribing) {\n        this.complete();\n      } else {\n        this.openBuffer();\n      }\n    }\n  }, {\n    key: \"openBuffer\",\n    value: function openBuffer() {\n      var closingSubscription = this.closingSubscription;\n\n      if (closingSubscription) {\n        this.remove(closingSubscription);\n        closingSubscription.unsubscribe();\n      }\n\n      var buffer = this.buffer;\n\n      if (this.buffer) {\n        this.destination.next(buffer);\n      }\n\n      this.buffer = [];\n      var closingNotifier;\n\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector();\n      } catch (err) {\n        return this.error(err);\n      }\n\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n      this.subscribing = false;\n    }\n  }]);\n}(SimpleOuterSubscriber); //# sourceMappingURL=bufferWhen.js.map","map":null,"metadata":{},"sourceType":"module"}