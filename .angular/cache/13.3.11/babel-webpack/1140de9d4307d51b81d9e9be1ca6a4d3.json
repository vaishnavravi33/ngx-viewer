{"ast":null,"code":"import _classCallCheck from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Projects\\\\ngx-viewer\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, NgModule } from '@angular/core';\nimport Viewer from 'viewerjs';\nvar NgxViewerDirective = /*#__PURE__*/(function () {\n  var NgxViewerDirective = /*#__PURE__*/function () {\n    function NgxViewerDirective(elementRef) {\n      _classCallCheck(this, NgxViewerDirective);\n\n      this.elementRef = elementRef;\n      this.viewerOptions = {};\n      this.viewerReady = new EventEmitter();\n      this.viewerShow = new EventEmitter();\n      this.viewerShown = new EventEmitter();\n      this.viewerHide = new EventEmitter();\n      this.viewerHidden = new EventEmitter();\n      this.viewerView = new EventEmitter();\n      this.viewerViewed = new EventEmitter();\n      this.viewerZoom = new EventEmitter();\n      this.viewerZoomed = new EventEmitter();\n      this.nativeElement = this.elementRef.nativeElement;\n    }\n\n    return _createClass(NgxViewerDirective, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        this.initViewer();\n      }\n    }, {\n      key: \"initViewer\",\n      value: function initViewer() {\n        var _this = this;\n\n        if (this.instance) {\n          this.instance.destroy();\n        }\n\n        this.instance = new Viewer(this.nativeElement, Object.assign({\n          // Transitions currently break the Viewer when running optimizations during ng build (i.e in prod mode)\n          // TODO: Find a fix for this so we don't have to force disable transitions\n          transition: false\n        }, this.viewerOptions));\n        this.nativeElement.addEventListener('ready', function (event) {\n          return _this.viewerReady.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('show', function (event) {\n          return _this.viewerShow.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('shown', function (event) {\n          return _this.viewerShown.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('hide', function (event) {\n          return _this.viewerHide.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('hidden', function (event) {\n          return _this.viewerHidden.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('view', function (event) {\n          return _this.viewerView.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('viewed', function (event) {\n          return _this.viewerViewed.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('zoom', function (event) {\n          return _this.viewerZoom.emit(event);\n        }, false);\n        this.nativeElement.addEventListener('zoomed', function (event) {\n          return _this.viewerZoomed.emit(event);\n        }, false);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.instance) {\n          this.instance.destroy();\n        }\n      }\n    }]);\n  }();\n\n  NgxViewerDirective.ɵfac = function NgxViewerDirective_Factory(t) {\n    return new (t || NgxViewerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  NgxViewerDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NgxViewerDirective,\n    selectors: [[\"\", \"ngxViewer\", \"\"]],\n    inputs: {\n      viewerOptions: \"viewerOptions\"\n    },\n    outputs: {\n      viewerReady: \"viewerReady\",\n      viewerShow: \"viewerShow\",\n      viewerShown: \"viewerShown\",\n      viewerHide: \"viewerHide\",\n      viewerHidden: \"viewerHidden\",\n      viewerView: \"viewerView\",\n      viewerViewed: \"viewerViewed\",\n      viewerZoom: \"viewerZoom\",\n      viewerZoomed: \"viewerZoomed\"\n    }\n  });\n  return NgxViewerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NgxViewerModule = /*#__PURE__*/(function () {\n  var NgxViewerModule = /*#__PURE__*/_createClass(function NgxViewerModule() {\n    _classCallCheck(this, NgxViewerModule);\n  });\n\n  NgxViewerModule.ɵfac = function NgxViewerModule_Factory(t) {\n    return new (t || NgxViewerModule)();\n  };\n\n  NgxViewerModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: NgxViewerModule\n  });\n  NgxViewerModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return NgxViewerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgxViewerModule, {\n    declarations: [NgxViewerDirective],\n    exports: [NgxViewerDirective]\n  });\n})();\n/*\r\n * Public API Surface of ngx-viewer\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgxViewerDirective, NgxViewerModule }; //# sourceMappingURL=ngx-viewer.js.map","map":null,"metadata":{},"sourceType":"module"}